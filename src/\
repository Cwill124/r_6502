use crate::token::Token;
use std::collections::HashMap;
pub fn init() -> HashMap<Token,u8> {
    let mut map = HashMap::new();
    map.insert(Token::ADC, 2 );
    map.insert(Token::AdcZP, 3 );
    map.insert(Token::AdcAP, 4 );
    map.insert(Token::AND, 2 );
    map.insert(Token::AndZP, 3 );
    map.insert(Token::AndAP, 4 );
    map.insert(Token::ASL, 2 );
    map.insert(Token::AslZP, 5 );
    map.insert(Token::AslAP, 6 );
    map.insert(Token::BCC, 2 );
    map.insert(Token::BCS, 2 );
    map.insert(Token::BIT, 3 );
    map.insert(Token::BitAP, 4 );
    map.insert(Token::BMI, 2 );
    map.insert(Token::BNE, 2 );
    map.insert(Token::BPL, 2 );
    map.insert(Token::BRK, 7 );
    map.insert(Token::BVC, 2 );
    map.insert(Token::BVS, 2 );
    map.insert(Token::CLC, 2 );
    map.insert(Token::CLD, 2 );
    map.insert(Token::CLI, 2 );
    map.insert(Token::CLV, 2 );
    map.insert(Token::CMP, 2 );
    map.insert(Token::CmpZP, 3 );
    map.insert(Token::CmpAP, 4 );
    map.insert(Token::CPX, 2 );
    map.insert(Token::CpxZP, 3 );
    map.insert(Token::CpxAP, 4 );
    map.insert(Token::CPY, 2 );
    map.insert(Token::CpyZP, 3 );
    map.insert(Token::CpyAP, 4 );
    map.insert(Token::DEC, 5 );
    map.insert(Token::DecAP, 6 );
    map.insert(Token::DEX, 2 );
    map.insert(Token::DEY, 2 );
    map.insert(Token::EOR, 2 );
    map.insert(Token::EorZP, 3 );
    map.insert(Token::EorAP, 4 );
    map.insert(Token::INC, 5 );
    map.insert(Token::IncAP, 6 );
    map.insert(Token::INX, 2 );
    map.insert(Token::INY, 2 );
    map.insert(Token::JMP, 3 );
    map.insert(Token::JSR, 6 );
    map.insert(Token::LDA, 2 );
    map.insert(Token::LdaZP, 3 );
    map.insert(Token::LdaAP, 4 );
    map.insert(Token::LDX, 2 );
    map.insert(Token::LdxZP, 3 );
    map.insert(Token::LdxAP, 4 );
    map.insert(Token::LDY, 2 );
    map.insert(Token::LdyZP, 3 );
    map.insert(Token::LdyAP, 4 );
    map.insert(Token::LSR, 2 );
    map.insert(Token::LsrZP, 5 );
    map.insert(Token::LsrAP, 6 );
    map.insert(Token::NOP, 2 );
    map.insert(Token::ORA, 2 );
    map.insert(Token::OraZP, 3 );
    map.insert(Token::OraAP, 4 );
    map.insert(Token::PHA, 3 );
    map.insert(Token::PHP, 3 );
    map.insert(Token::PLA, 4 );
    map.insert(Token::PLP, 4 );
    map.insert(Token::ROL, 2);
    map.insert(Token::RolZP, 5);
    map.insert(Token::RolAP, 6);
    map.insert(Token::ROR, 2);
    map.insert(Token::RorZP, 5);
    map.insert(Token::RorAP, 6);
    map.insert(Token::RTI, 6);
    map.insert(Token::RTS, 6);
    map.insert(Token::SBC, 2);
    map.insert(Token::SbcZP, 3);
    map.insert(Token::SbcAP, 4);
    map.insert(Token::SEC, 2);
    map.insert(Token::SED, 2);
    map.insert(Token::SEI, 2);
    map.insert(Token::STA, 3);
    map.insert(Token::StaAP, 4);
    map

}
